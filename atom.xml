<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://youmengme.github.io/gidea</id>
    <title>youmeng - 又双叒叕写博客</title>
    <updated>2021-07-28T15:35:47.816Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://youmengme.github.io/gidea"/>
    <link rel="self" href="https://youmengme.github.io/gidea/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://youmengme.github.io/gidea/images/avatar.png</logo>
    <icon>https://youmengme.github.io/gidea/favicon.ico</icon>
    <rights>All rights reserved 2021, youmeng - 又双叒叕写博客</rights>
    <entry>
        <title type="html"><![CDATA[1. 实现一个带并发限制的Promise.all]]></title>
        <id>https://youmengme.github.io/gidea/post/1-shi-xian-yi-ge-dai-bing-fa-xian-zhi-de-promiseall/</id>
        <link href="https://youmengme.github.io/gidea/post/1-shi-xian-yi-ge-dai-bing-fa-xian-zhi-de-promiseall/">
        </link>
        <updated>2021-07-28T15:31:18.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>头条的一道面试题~~~ emm 有点意思</p>
</blockquote>
<p>在业务开发中，如用户进入页面，一般会通过http请求像服务端获取数据，而且大多数情况下会有多个http请求。我们一般使用<code>Promise.all</code>来调用接口，以达到更快速度的拿到数据渲染页面。<code>Promise.all</code>会在数组中的所有promise达到<code>resolve</code>状态后，才会去执行<code>.then</code>的回调。</p>
<p>但是这样也给服务器带来了更大的压力。可以想象一种情况，如果页面上有10w+请求待处理(这里暂不考虑浏览器的请求并发限制)，你又只能在拿到所有请求的结果后才能多结果进行处理。这种情况下，大家理所当然的想到了<code>Promise.all</code>。但是面对洪水般的请求，服务器可能会出现<code>TCP</code>连接数不足照成等待或拒绝连接。</p>
<p>这个时候我们就需要对<code>Promise.all</code>进行并发限制。</p>
<p><code>Promise.all</code>并发限制指的是如果有10个请求，并发限制是5。那么会在执行的一瞬间发出请求<code>1, 2, 3, 4, 5</code>，当这5个请求中任意一个成功或失败后，继续请求<code>6</code>，循环往复，直至10个请求全部完成。然后一次性返回所有请求的结果。从表现上来看和原来的<code>Promise.all</code>没有任何区别。</p>
<h2 id="大致思路">大致思路</h2>
<ol>
<li><code>await</code>一个promise会暂停当前代码段继续往下执行，直到promise发生改变。</li>
<li><code>Promise.race(promises)</code>会在<code>promises</code>中任意一个promise发生状态改变时返回结果。</li>
<li>如果依次循环所有待执行的请求，将其放入待执行列表中，数量达到并发限制时，使用<code>await Promise.race</code>暂停代码段并执行这些请求</li>
<li><code>Promise.race</code>状态发生改变，继续循环，直至执行完所有请求。</li>
</ol>
<blockquote>
<p>读到这里是否有思路了呢？如果有，那就自己先写着试试。看答案和思考得到的结果记忆深度是不一样的哦~~</p>
</blockquote>
<h2 id="代码实现">代码实现</h2>
<ol>
<li>定义两个变量,<code>array</code>表示待执行的函数列表，<code>limit</code>表示并发限制</li>
<li>遍历待执行的函数数组
<ol>
<li>从<code>array</code>第1个元素开始，初始化<code>promise</code>对象，同时用一个<code>executing</code>数组保存正在执行的promise，并将其存放于<code>ret</code>中</li>
<li>循环初始化promise，直到达到<code>limt</code></li>
<li>使用<code>await Promise.race</code>，暂停<code>for</code>循环，并执行<code>executing</code>中的promise。</li>
<li>当<code>executing</code>中有任意一个promise执行完毕，就继续<code>for</code>循环，不断初始化promise并放入<code>executing</code>中，知道达到<code>limit</code></li>
<li>当所有promise都执行完了，调用<code>Promise.all</code>返回</li>
</ol>
</li>
</ol>
<pre><code class="language-js">async function asyncPool(array, limit) {
	// 存储Promise的执行结果  
  const ret = []
  // 正在执行的promise
  const executing = []  

  // 遍历待执行的函数列表
  for (const item of array) {
    // promise包装并执行当前待执行函数
    const p = Promise.resolve().then(() =&gt; item(1))
    // 将函数存至ret结果列表中(p此时是 Promise { &lt;pending&gt; })
    ret.push(p)
    if (limit &lt;= array.length) {
      // 在p.then执行的时候说明p的状态已经发生了翻转(resolve || reject),
      // 此时将executing列表删除一个
      p.then(() =&gt; executing.splice(0, 1))
      // 将p存放至executing中
      executing.push(p)
     
      // executing内的待执行数量大于等于limit的时候，使用await Promise.race暂停for循环，
      // executing中任意一个promise发生状态改变，就会继续循环
      if (executing.length &gt;= limit) await Promise.race(executing)
    }
  }
  
  return Promise.all(ret)
}

asyncPool([], 10).then(result =&gt; console.log(result))
</code></pre>
<h2 id="测试用例">测试用例</h2>
<pre><code class="language-js">const delay = s =&gt; new Promise(resolve =&gt; setTimeout(resolve, s * 1000))

async function request(index) {
  console.log(`Request: ${index}`)
  await delay(1)
  console.log(`Response: ${index}`)
  return index
}

const pool = [...new Array(50).keys()].fill(request)
async function asyncPool(array, limit) {
  const ret = []
  const executing = []  

  for (const itemIndex in array) {
    const item = array[itemIndex]
    const p = Promise.resolve().then(() =&gt; item(itemIndex))
    ret.push(p)
    if (limit &lt;= array.length) {
      p.then(() =&gt; executing.splice(0, 1))
      // console.log('executing', executing)
      executing.push(p)
      if (executing.length &gt;= limit) await Promise.race(executing)
    }
  }

  return Promise.all(ret)
}

asyncPool(pool, 10).then(result =&gt; console.log(result))

</code></pre>
<h2 id="总结">总结</h2>
<p>这个面试题主要考了多<code>Promise</code>的理解与运用，网上有很多个版本的实现，递归调用的居多。emmm...我不喜欢递归，所以没用递归。</p>
<p>温故而知新，如果记得不是很深刻，建议<code>Ctrl + D</code>收藏到书签，下次访问更便捷。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://youmengme.github.io/gidea/post/hello-gridea/</id>
        <link href="https://youmengme.github.io/gidea/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>